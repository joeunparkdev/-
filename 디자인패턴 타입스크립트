//싱글톤:어떤 클래스가 오직 하나의 인스턴스만을 갖도록 보장하고, 그 인스턴스에 접근할 수 있는 전역적인 접점을 제공함.
class Singleton {
  private static instance: Singleton;

  private constructor() {}

  public static getInstance(): Singleton {
    if (!Singleton.instance) {
      Singleton.instance = new Singleton();
    }
    return Singleton.instance;
  }

  public showMessage(): void {
    console.log("Hello from Singleton!");
  }
}

//옵저버:한 객체의 상태가 바뀌면, 그 객체에 의존하는 다른 객체들에게 연락이 가고 자동으로 내용이 갱신되는 방식으로 일대다의 의존성을 정의함.
interface Observer {
  update(message: string): void;
}

class ConcreteObserver implements Observer {
  private name: string;

  constructor(name: string) {
    this.name = name;
  }

  public update(message: string): void {
    console.log(`${this.name} received message: ${message}`);
  }
}

class Subject {
  private observers: Observer[] = [];

  public addObserver(observer: Observer): void {
    this.observers.push(observer);
  }

  public removeObserver(observer: Observer): void {
    this.observers = this.observers.filter(o => o !== observer);
  }

  public notifyObservers(message: string): void {
    this.observers.forEach(observer => observer.update(message));
  }
}

//팩토리:객체를 생성하기 위한 인터페이스를 정의하고, 서브 클래스에서 어떤 클래스의 인스턴스를 만들지 결정하게함.
interface Product {
  display(): void;
}

class ConcreteProductA implements Product {
  display(): void {
    console.log("This is Product A");
  }
}

class ConcreteProductB implements Product {
  display(): void {
    console.log("This is Product B");
  }
}

abstract class Creator {
  abstract factoryMethod(): Product;

  public someOperation(): void {
    const product = this.factoryMethod();
    product.display();
  }
}

class ConcreteCreatorA extends Creator {
  factoryMethod(): Product {
    return new ConcreteProductA();
  }
}

class ConcreteCreatorB extends Creator {
  factoryMethod(): Product {
    return new ConcreteProductB();
  }
}

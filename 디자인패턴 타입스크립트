//싱글톤
class Singleton {
  private static instance: Singleton;

  private constructor() {}

  public static getInstance(): Singleton {
    if (!Singleton.instance) {
      Singleton.instance = new Singleton();
    }
    return Singleton.instance;
  }

  public showMessage(): void {
    console.log("Hello from Singleton!");
  }
}

//옵저버
interface Observer {
  update(message: string): void;
}

class ConcreteObserver implements Observer {
  private name: string;

  constructor(name: string) {
    this.name = name;
  }

  public update(message: string): void {
    console.log(`${this.name} received message: ${message}`);
  }
}

class Subject {
  private observers: Observer[] = [];

  public addObserver(observer: Observer): void {
    this.observers.push(observer);
  }

  public removeObserver(observer: Observer): void {
    this.observers = this.observers.filter(o => o !== observer);
  }

  public notifyObservers(message: string): void {
    this.observers.forEach(observer => observer.update(message));
  }
}

//팩토리
interface Product {
  display(): void;
}

class ConcreteProductA implements Product {
  display(): void {
    console.log("This is Product A");
  }
}

class ConcreteProductB implements Product {
  display(): void {
    console.log("This is Product B");
  }
}

abstract class Creator {
  abstract factoryMethod(): Product;

  public someOperation(): void {
    const product = this.factoryMethod();
    product.display();
  }
}

class ConcreteCreatorA extends Creator {
  factoryMethod(): Product {
    return new ConcreteProductA();
  }
}

class ConcreteCreatorB extends Creator {
  factoryMethod(): Product {
    return new ConcreteProductB();
  }
}
